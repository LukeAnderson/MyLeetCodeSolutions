/*
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
*/
public class Solution {
    public int[] TwoSum(int[] nums, int target) {                   
        Dictionary<int, int> valuePairs = new Dictionary<int, int>();  
        int[] indices = new int[2];  
        for (int i = 0; i < nums.Length; i++)
        {
            if (valuePairs.ContainsKey(nums[i]))
            {
                indices[0] = valuePairs[nums[i]];
                indices[1] = i;
            }
            else
            {                                     
                if(!valuePairs.ContainsKey(target - nums[i]))
                        valuePairs.Add(target - nums[i], i);
            }
        }
        return indices;
    }